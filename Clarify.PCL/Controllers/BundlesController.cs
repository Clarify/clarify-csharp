/*
 * Clarify.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/06/2014
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using Clarify.PCL;
using Clarify.PCL.Models;

namespace Clarify.PCL.Controllers
{
    public class BundlesController
    {
        /// <summary>
        /// Create a new bundle with the specified name, media url, and optional JSON metadata.
        /// </summary>
        /// <param name="name">Optional parameter: Name of the bundle. Up to 128 characters</param>
        /// <param name="mediaUrl">Optional parameter: TODO: type parameter description here</param>
        /// <param name="audioChannel">Optional parameter: TODO: type parameter description here</param>
        /// <param name="metadata">Optional parameter: TODO: type parameter description here</param>
        /// <param name="notifyUrl">Optional parameter: TODO: type parameter description here</param>
        /// <param name="externalId">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the PostBundleResponseModel response from the API call</return>
        public PostBundleResponseModel PostCreateABundle(
                string name = null,
                string mediaUrl = null,
                string audioChannel = null,
                DataModel metadata = null,
                string notifyUrl = null,
                string externalId = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken))
                .field("name", name)
                .field("media_url", mediaUrl)
                .field("audio_channel", audioChannel)
                .field("metadata", APIHelper.JsonSerialize(metadata))
                .field("notify_url", notifyUrl)
                .field("external_id", externalId);

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<PostBundleResponseModel>(response.Body);
        }

        /// <summary>
        /// Get a bundle that has previously been created.
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="embed">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the GetBundleResponseModel response from the API call</return>
        public GetBundleResponseModel GetABundle(
                string bundleId,
                string embed = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "embed", embed }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<GetBundleResponseModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="name">Optional parameter: TODO: type parameter description here</param>
        /// <param name="notifyUrl">Optional parameter: TODO: type parameter description here</param>
        /// <param name="externalId">Optional parameter: TODO: type parameter description here</param>
        /// <param name="version">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the UpdateBundleResponseModel response from the API call</return>
        public UpdateBundleResponseModel PutUpdateABundle(
                string bundleId,
                string name = null,
                string notifyUrl = null,
                string externalId = null,
                int? version = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken))
                .field("name", name)
                .field("notify_url", notifyUrl)
                .field("external_id", externalId)
                .field("version", version);

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if (response.Code == 409)
                throw new APIException(@"Conflict", 409);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<UpdateBundleResponseModel>(response.Body);
        }

        /// <summary>
        /// Delete a bundle and its related metadata and tracks. This will only delete media stored on Clarify systems and not delete the source media on remote systems.c
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteABundle(
                string bundleId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// Gets the metadata for a bundle
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the ClarifyMetadataModel response from the API call</return>
        public ClarifyMetadataModel GetBundleMetadata(
                string bundleId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/metadata");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<ClarifyMetadataModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBundleMetaData(
                string bundleId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/metadata");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="data">Required parameter: TODO: type parameter description here</param>
        /// <param name="version">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the BaseClassLinkModel response from the API call</return>
        public BaseClassLinkModel PutUpdateBundleMetadata(
                string bundleId,
                DataModel data,
                int? version = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/metadata");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken))
                .field("data", APIHelper.JsonSerialize(data))
                .field("version", version);

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if (response.Code == 409)
                throw new APIException(@"Conflict", 409);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<BaseClassLinkModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the ClarifyTracksModel response from the API call</return>
        public ClarifyTracksModel GetBundleTracks(
                string bundleId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/tracks");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<ClarifyTracksModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="mediaUrl">Required parameter: TODO: type parameter description here</param>
        /// <param name="label">Optional parameter: TODO: type parameter description here</param>
        /// <param name="audioChannel">Optional parameter: TODO: type parameter description here</param>
        /// <param name="track">Optional parameter: TODO: type parameter description here</param>
        /// <param name="version">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the UpdateTrackResponseModel response from the API call</return>
        public UpdateTrackResponseModel PostUpdateBundleTrack(
                string bundleId,
                string mediaUrl,
                string label = null,
                string audioChannel = null,
                int? track = null,
                int? version = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/tracks");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken))
                .field("media_url", mediaUrl)
                .field("label", label)
                .field("audio_channel", audioChannel)
                .field("track", track)
                .field("version", version);

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if (response.Code == 409)
                throw new APIException(@"Conflict", 409);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<UpdateTrackResponseModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="track">Required parameter: Track number. An integer from 0 to 3. If not specified, all tracks are deleted.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBundleTracks(
                string bundleId,
                int track)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/tracks");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken))
                .field("track", track);

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// Gets a single track in a bundle. This includes the specification of the media and the status of fetching and processing it.
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="trackId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the GetBundleTrackResponseModel response from the API call</return>
        public GetBundleTrackResponseModel GetBundleTrack(
                string bundleId,
                string trackId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/tracks/{track_id}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId },
                    { "track_id", trackId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<GetBundleTrackResponseModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="bundleId">Required parameter: TODO: type parameter description here</param>
        /// <param name="trackId">Required parameter: TODO: type parameter description here</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBundleTrack(
                string bundleId,
                string trackId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles/{bundle_id}/tracks/{track_id}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "bundle_id", bundleId },
                    { "track_id", trackId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if (response.Code == 404)
                throw new APIException(@"Not found", 404);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="limit">Optional parameter: limit results to specified number of bundles. Default is 10. Max 100.</param>
        /// <param name="embed">Optional parameter: list of link relations to embed in the result collection. Zero or more of: items, tracks, metadata. List is space or comma separated single string or an array of strings</param>
        /// <param name="iterator">Optional parameter: opaque value, automatically provided in next/prev links</param>
        /// <return>Returns the ListBundleResponseModel response from the API call</return>
        public ListBundleResponseModel GetListBundles(
                int? limit = null,
                string embed = null,
                string iterator = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/bundles");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "limit", limit },
                    { "embed", embed },
                    { "iterator", iterator }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //invoke request and get response
            HttpResponse<String> response = request.asString();

            //Error handling using HTTP status codes
            if (response.Code == 400)
                throw new APIException(@"Bad request", 400);

            else if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<ListBundleResponseModel>(response.Body);
        }

    }
} 